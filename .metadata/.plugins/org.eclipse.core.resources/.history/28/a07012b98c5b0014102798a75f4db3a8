/**
 * Copyright 2014  XCL-Charts
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 	
 * @Project XCL-Charts 
 * @Description Android图表基类库
 * @author XiongChuanLiang<br/>(xcl_168@aliyun.com)
 * @license http://www.apache.org/licenses/  Apache v2 License
 * @version 1.0
 */
package org.xclcharts.renderer;


import java.util.ArrayList;

import org.xclcharts.common.DrawHelper;
import org.xclcharts.common.IFormatterDoubleCallBack;
import org.xclcharts.common.MathHelper;
import org.xclcharts.renderer.axis.AxisTick;
import org.xclcharts.renderer.axis.CategoryAxis;
import org.xclcharts.renderer.axis.CategoryAxisRender;
import org.xclcharts.renderer.axis.DataAxis;
import org.xclcharts.renderer.axis.DataAxisRender;
import org.xclcharts.renderer.plot.AxisTitle;
import org.xclcharts.renderer.plot.AxisTitleRender;

import android.graphics.Canvas;
import android.graphics.Paint.Align;

/**
 * @ClassName AxisChart
 * @Description 所有用到坐标类的图表的基类,主要用于定义和绘制坐标轴
 * @author XiongChuanLiang<br/>(xcl_168@aliyun.com)
 *  
 */

public class AxisChart extends EventChart {
		
	//数据轴
	protected DataAxisRender dataAxis  = null;
	//标签轴
	protected CategoryAxisRender categoryAxis  = null;	
	//轴标题类
	private AxisTitleRender axisTitle = null;
	
	//格式化柱形顶上或线交叉点的标签
	private IFormatterDoubleCallBack mItemLabelFormatter;
	
	//平移模式下的可移动方向
	private XEnum.PanMode mPlotPanMode = XEnum.PanMode.FREE;
	private boolean mEnablePanMode = true;
	
	
	// 确定是竖向柱形图(默认)还是横向
	protected XEnum.Direction mDirection = XEnum.Direction.VERTICAL;
	
	//数据轴显示在左边还是右边
	private XEnum.DataAxisPosition mDataAxisPosition = 
									XEnum.DataAxisPosition.LEFT;
	
	private XEnum.CategoryAxisPosition mCategoryAxisPosition = 
									XEnum.CategoryAxisPosition.BOTTOM;
	
	//是否将轴封闭
	private boolean mAxesClosed = false;	
	
	private float myMargin = 10.0f;
	private float mxMargin = 15.0f;
	
	
	public AxisChart() {
		// TODO Auto-generated constructor stub			
		initChart();		
	}
	
	
	/**
	 * 初始化设置
	 */
	private void initChart()
	{				
		
		//数据轴
		if(null == dataAxis)initDataAxis(); 
		
		//标签轴
		if(null == categoryAxis)initCategoryAxis();
						
		//初始化图例
		if(null != plotLegend)
		{
			plotLegend.show();
			plotLegend.setType(XEnum.LegendType.ROW);
			plotLegend.setHorizontalAlign(XEnum.HorizontalAlign.LEFT);
			plotLegend.setVerticalAlign(XEnum.VerticalAlign.TOP);
			plotLegend.hideBox();
		}		
	}
		

	 /**
	  * 开放数据轴绘制类
	  * @return 数据轴绘制类
	  */
	public DataAxis getDataAxis() 
	{
		//数据轴
		initDataAxis(); 
		return dataAxis;
	}

	/**
	 * 开放标签轴绘制类
	 * @return 标签轴绘制类
	 */
	public CategoryAxis getCategoryAxis() 
	{
		//标签轴
		initCategoryAxis();
		return categoryAxis;
	}
			
	private void initCategoryAxis()
	{
		if(null == categoryAxis)categoryAxis  = new CategoryAxisRender();
	}
	
	public void initDataAxis() 
	{
		if(null == dataAxis)dataAxis  = new DataAxisRender();	
	}
	
	protected void drawCategoryAxisLabels(Canvas canvas,
										  ArrayList<AxisTick> lstLabels)
	{
		if(null == lstLabels) return ;
		for(AxisTick t : lstLabels)
		{
			switch(mCategoryAxisPosition)
			{				 
				case LEFT: //Y
				case RIGHT:								
					categoryAxis.renderAxisHorizontalTick(this,canvas,t.X,t.Y, t.Label);					
					break;							
				case TOP: //X
				case BOTTOM:		
					categoryAxis.renderAxisVerticalTick(canvas,t.X,t.Y, t.Label);		
					break;			
			} //switch end
			
		}
	}
	
	protected void drawDataAxisLabels(Canvas canvas,
									 ArrayList<AxisTick> lstLabels)
	{
		
		if(null == lstLabels) return ;		
		for(AxisTick t : lstLabels)
		{
			dataAxis.setAxisTickCurrentID(t.ID);
			
			switch(mDataAxisPosition)
			{				 
				case LEFT: //Y
				case RIGHT:		
					dataAxis.renderAxisHorizontalTick(this,canvas,t.X,t.Y, t.Label);										
					break;							
				case TOP: //X
				case BOTTOM:											
					dataAxis.renderAxisVerticalTick(canvas,t.X,t.Y, t.Label);										
					break;			
			} //switch end
		}
	}

	/**
	 * 开放轴标题绘制类
	 * @return 图例绘制类
	 */
	public AxisTitle getAxisTitle() 
	{		
		//轴标题
		if(null == axisTitle)axisTitle = new AxisTitleRender();					
		return axisTitle;
	}

	/**
	 * 轴所占的屏幕宽度
	 * @return  屏幕宽度
	 */
	protected float getAxisScreenWidth()
	{
		if(null == plotArea)return 0.0f;
		return(Math.abs(plotArea.getRight() - plotArea.getLeft()));
	}
	
	protected float getPlotScreenWidth()
	{
		if(null == plotArea)return 0.0f;
		return(Math.abs(plotArea.getPlotRight() - plotArea.getPlotLeft()));
	}
	
	protected float getPlotScreenHeight()
	{
		if(null == plotArea)return 0.0f;
		return( Math.abs(plotArea.getPlotBottom() - plotArea.getPlotTop()));
	}
	
	
	/**
	 * 轴所占的屏幕高度
	 * @return 屏幕高度
	 */
	protected float getAxisScreenHeight()
	{
		if(null == plotArea)return 0.0f;
		return( Math.abs(plotArea.getBottom() - plotArea.getTop()));
	}
	
	/**
	 * 	竖向柱形图
	 *  Y轴的屏幕高度/数据轴的刻度标记总数 = 步长
	 * @return Y轴步长
	 */
	protected float getVerticalYSteps(int tickCount) {		
		return (div(getPlotScreenHeight(),tickCount)); 
	}
	
	/**
	 * 竖向柱形图
	 * 得到X轴的步长
	 * X轴的屏幕宽度 / 刻度标记总数  = 步长
	 * @param num 刻度标记总数 
	 * @return X轴步长
	 */
	protected float getVerticalXSteps(int tickCount) {
		//柱形图为了让柱形显示在tick的中间，会多出一个步长即(dataSet.size()+1)			
		return  (div(getPlotScreenWidth() ,tickCount)); 
	}
	
	
	
	/**
	 * 设置标签显示格式
	 * 
	 * @param callBack
	 *            回调函数
	 */
	public void setItemLabelFormatter(IFormatterDoubleCallBack callBack) {
		this.mItemLabelFormatter = callBack;
	}

	/**
	 * 返回标签显示格式
	 * 
	 * @param value 传入当前值
	 * @return 显示格式
	 */
	protected String getFormatterItemLabel(double value) {
		String itemLabel = "";
		try {
			itemLabel = mItemLabelFormatter.doubleFormatter(value);
		} catch (Exception ex) {
			itemLabel = Double.toString(value);
			// DecimalFormat df=new DecimalFormat("#0");
			// itemLabel = df.format(value).toString();
		}
		return itemLabel;
	}
		
	
	/**
	 * 检查竖图中数据轴的tick是否显示 
	 * @param currentY	y坐标
	 * @param moveY	y坐标平移值
	 * @return	是否绘制
	 */
	
	protected boolean isDrawVerticalDataTickMarks(float currentY,float moveY)
	{
		if(Float.compare(currentY , plotArea.getTop() - moveY) == -1 || 
				Float.compare(currentY, plotArea.getBottom()  - moveY) == 1 )
		{
			return true;
		}
		return false;
	}
	
			
	/**
	 *  检查竖图中分类轴的tick是否显示 
	 * @param currentX	x坐标
	 * @param moveX	x坐标平移值
	 * @return 是否绘制
	 */
	
	protected boolean isDrawVerticalCategoryTickMarks(float currentX,float moveX)
	{
		if(Float.compare(currentX , plotArea.getLeft() - moveX ) == -1 || 
				Float.compare(currentX , plotArea.getRight() - moveX) == 1 )				
		{
			return true;
		}
		return false;
	}
	
	
	/*
	protected boolean isRenderHorizontalDataAxisTick(float currentX,float moveX)
	{
		if(Float.compare(currentX , plotArea.getLeft() - moveX ) == -1 || 
				Float.compare(currentX , plotArea.getRight() - moveX) == 1 )				
		{
			return true;
		}
		return false;
	}
	
	protected boolean isRenderHorizontalCategoryAxisTick(float currentY,float moveY)
	{
		if(categoryAxis.isShowAxisLabels() && 
				(Float.compare(currentY , plotArea.getTop() - moveY) == -1 || 
				 Float.compare(currentY , plotArea.getBottom() - moveY) == 1 ))
		{
			return true;
		}
		return false;
	}
	*/
			
	//横向网格线
	protected void drawHorizontalGridLines(Canvas canvas,float plotLeft,float plotRight,
			int tickID ,int tickCount,
			float YSteps,float currentY)
	{
		if(tickID <= 0 ) return;
		
		// 从左到右的横向网格线
		if (tickID % 2 != 0) {
			plotGrid.renderOddRowsFill(canvas,plotLeft, add(currentY , YSteps),plotRight, currentY);
		} else {
			plotGrid.renderEvenRowsFill(canvas,plotLeft,add(currentY , YSteps),plotRight, currentY);
		}
	
		if (tickID > 0 && tickID < tickCount){
			plotGrid.setPrimaryTickLine(dataAxis.isPrimaryTick(tickID));
			plotGrid.renderGridLinesHorizontal(canvas,plotLeft, currentY,plotRight, currentY);
		}		
	}
	
	//绘制竖向网格线
	protected void drawVerticalGridLines(Canvas canvas,float plotTop,float plotBottom,
			int tickID ,int tickCount,
			float XSteps,float currentX)
	{
		// 绘制竖向网格线
		if (plotGrid.isShowVerticalLines()) 
		{
			//if (i > 0 && i + 1 < tickCount) //line
				plotGrid.renderGridLinesVertical(canvas,currentX,
												 plotBottom, currentX,plotTop);
		}
	}
	
		
	/**
	 * 设置数据轴显示在哪边,默认是左边
	 * @param position 显示位置
	 */
	public void setDataAxisPosition( XEnum.DataAxisPosition position)
	{
		mDataAxisPosition = position;	
	}
	
	/**
	 * 返回数据轴显示在哪边
	 * @return 显示位置
	 */
	public XEnum.DataAxisPosition getDataAxisPosition()
	{
		return mDataAxisPosition;
	}
	
	/**
	 * 设置分类轴显示在哪边,默认是底部
	 * @param position 显示位置
	 */
	public void setCategoryAxisPosition( XEnum.CategoryAxisPosition position)
	{
		mCategoryAxisPosition = position;	
	}
	
	/**
	 * 返回分类轴显示在哪边
	 * @return 显示位置
	 */
	public XEnum.CategoryAxisPosition getCategoryAxisPosition()
	{
		return mCategoryAxisPosition;
	}
	
	protected void categoryAxisDefaultSetting()
	{		
		if(null == mDataAxisPosition) return;
		
		if(null == categoryAxis) return;
		if(!categoryAxis.isShow())return;
		
		if(null != mDirection)
		{
			switch (mDirection) {
				case HORIZONTAL: {		
					this.setCategoryAxisPosition(XEnum.CategoryAxisPosition.LEFT);				
					break;
				}
				case VERTICAL: {
					this.setCategoryAxisPosition(XEnum.CategoryAxisPosition.BOTTOM);			
					break;
				}
			}
		}
		
		if(XEnum.DataAxisPosition.LEFT == mDataAxisPosition)
		{
			categoryAxis.setHorizontalTickAlign(Align.CENTER);
		}
		
		categoryAxis.getAxisPaint().setStrokeWidth(2);
		categoryAxis.getTickMarksPaint().setStrokeWidth(2);
	}
	
	protected void dataAxisDefaultSetting()
	{		
		if(null == mDataAxisPosition) return;
		
		if(null == dataAxis) return;
		if(!dataAxis.isShow())return;
		
		if(null != mDirection)
		{
			switch (mDirection) {
				case HORIZONTAL: {		
					this.setDataAxisPosition(XEnum.DataAxisPosition.BOTTOM);		
					break;
				}
				case VERTICAL: {
					this.setDataAxisPosition(XEnum.DataAxisPosition.LEFT);					
					break;
				}
			}
		}
				
		if(XEnum.DataAxisPosition.LEFT == mDataAxisPosition)
		{
			dataAxis.setHorizontalTickAlign(Align.LEFT);	
		}else{
			dataAxis.setHorizontalTickAlign(Align.RIGHT);
			if(dataAxis.isShowAxisLabels())
					dataAxis.getTickLabelPaint().setTextAlign(Align.LEFT);	
		}
			
		if(dataAxis.isShowAxisLine())
				dataAxis.getAxisPaint().setStrokeWidth(2);
		if(dataAxis.isShowTickMarks())
				dataAxis.getTickMarksPaint().setStrokeWidth(2);
		
	}
	
	/**
	 * 封闭轴
	 * @param status 状态
	 */
	public void setAxesClosed(boolean status)
	{
		mAxesClosed = status;
	}
	
	/**
	 * 是否封闭轴
	 * @return 状态
	 */
	public boolean getAxesClosedStatus()
	{
		return mAxesClosed;
	}
	////////////////////////////
	
	protected float getDrawClipVerticalXMargin()
	{
		float xMargin = 0.0f;
		
		if(XEnum.DataAxisPosition.BOTTOM == mDataAxisPosition ||
		   XEnum.DataAxisPosition.TOP == mDataAxisPosition	
				)
		{					
			if(!dataAxis.isShowAxisLabels())return 0.0f;
			
			//默认一个数 1234567890
			xMargin = DrawHelper.getInstance().getTextWidth(
					   dataAxis.getTickLabelPaint(),"1234567890"); 						
		}
		
		if(XEnum.CategoryAxisPosition.BOTTOM == mCategoryAxisPosition ||
				   XEnum.CategoryAxisPosition.TOP == mCategoryAxisPosition	
						)
		{	
			if(!categoryAxis.isShowAxisLabels())return 0.0f;
			
			int count = categoryAxis.getDataSet().size();
			if(0 == count) return 0.0f;		
			
			String str = categoryAxis.getDataSet().get(0);					
			xMargin = DrawHelper.getInstance().getTextWidth(
									categoryAxis.getTickLabelPaint(), str); 
		
		}		
		xMargin += this.mxMargin;		
		return xMargin;
	}
	
	protected float getDrawClipVerticalYMargin()
	{
		float yMargin = 0.0f;
		if(XEnum.DataAxisPosition.LEFT == mDataAxisPosition ||
		   XEnum.DataAxisPosition.RIGHT == mDataAxisPosition	
				)
		{					
			//if(!dataAxis.isShowAxisLabels())return 1.0f;
			yMargin = DrawHelper.getInstance().getPaintFontHeight(
					dataAxis.getTickLabelPaint() ) / 2;	
			
		}
		
		if(XEnum.CategoryAxisPosition.LEFT == mCategoryAxisPosition ||
				   XEnum.CategoryAxisPosition.RIGHT == mCategoryAxisPosition)
		{	
			//if(!categoryAxis.isShowAxisLabels())return 1.0f;
			yMargin = DrawHelper.getInstance().getPaintFontHeight(
					categoryAxis.getTickLabelPaint() ) / 2;	

		}
		
		yMargin += this.myMargin;
		return yMargin;
	}
	
	
	
	/**
	 * 设置手势平移模式
	 * @param mode	平移模式
	 */
	public void setPlotPanMode(XEnum.PanMode mode)
	{
		 mPlotPanMode = mode;
	}
	
	/**
	 * 返回当前图表平移模式
	 * @return 平移模式
	 */
	public XEnum.PanMode getPlotPanMode()
	{
		return mPlotPanMode;
	}
	
	/**
	 * 激活平移模式
	 */
	public void enablePanMode()
	{
		mEnablePanMode = true;		
	}
	
	/**
	 * 禁用平移模式
	 */
	public void disablePanMode()
	{
		mEnablePanMode = false;		
	}
	
	/**
	 * 返回当前图表的平移状态
	 * @return
	 */
	public boolean getPanModeStatus()
	{
		return mEnablePanMode;
	}	
	/////////////////////////
	
	protected float getDrawClipYMargin()
	{		
		return getDrawClipVerticalYMargin();
	}
	
	protected float getDrawClipXMargin()
	{
		return getDrawClipVerticalXMargin();
	}
	
	//Pan模式下移动距离
	protected float mMoveX = 0.0f;
	protected float mMoveY = 0.0f;
	
	
	protected void initMoveXY()
	{
		mMoveX = mMoveY = 0.0f;  	
		switch(this.getPlotPanMode())
		{
		case HORIZONTAL:
			mMoveX = mTranslateXY[0]; 			
			break;
		case VERTICAL:
			mMoveY = mTranslateXY[1]; 					
			break;
		default:
			mMoveX = mTranslateXY[0]; 
			mMoveY = mTranslateXY[1]; 
			break;
		}
	}
	
	
	public boolean isShowRightAxis()
	{		
		return false;
	}
	
	protected void drawClipCategoryAxisGridlines(Canvas canvas)
	{
		
	}
	
	protected void drawClipDataAxisGridlines(Canvas canvas)
	{
		
	}
	
	protected void drawClipPlot(Canvas canvas)
	{
		
	}
		
	protected void drawClipAxisLine(Canvas canvas)
	{
		float plotLeft = plotArea.getLeft();
		float plotTop = plotArea.getTop();
		float plotRight = plotArea.getRight();
		float plotBottom = plotArea.getBottom();
	
		
		switch(mDataAxisPosition)
		{
		case LEFT:
			dataAxis.renderAxis(canvas,plotLeft, plotBottom, plotLeft, plotTop);
			
			if(getAxesClosedStatus()) 
				dataAxis.renderAxis(canvas,plotRight, plotTop, plotRight, plotBottom); 
			break;
		case RIGHT:
			dataAxis.renderAxis(canvas,plotRight, plotTop, plotRight, plotBottom); 
			
			if(getAxesClosedStatus()) 
				dataAxis.renderAxis(canvas,plotLeft, plotTop, plotLeft, plotBottom);			
			break;			
		case TOP:
			dataAxis.renderAxis(canvas,plotLeft, plotTop, plotRight, plotTop); 
			
			if(getAxesClosedStatus())
				dataAxis.renderAxis(canvas,plotLeft, plotBottom, plotRight, plotBottom); 
			break;
		case BOTTOM:
			dataAxis.renderAxis(canvas,plotLeft, plotBottom, plotRight, plotBottom); 
			
			if(getAxesClosedStatus())
				dataAxis.renderAxis(canvas,plotLeft, plotTop, plotRight, plotTop); 
			break;			
		}		
		
		switch(mCategoryAxisPosition)
		{
		case LEFT:
			categoryAxis.renderAxis(canvas,plotLeft, plotBottom, plotLeft, plotTop);
			
			if(getAxesClosedStatus())
				categoryAxis.renderAxis(canvas,plotRight, plotTop, plotRight, plotBottom); 
			break;
		case RIGHT:
			categoryAxis.renderAxis(canvas,plotRight, plotTop, plotRight, plotBottom); 
			
			if(getAxesClosedStatus())
				categoryAxis.renderAxis(canvas,plotLeft, plotBottom, plotLeft, plotTop);
			break;
			
		case TOP:
			categoryAxis.renderAxis(canvas,plotLeft, plotTop, plotRight, plotTop); 
			if(getAxesClosedStatus())
				categoryAxis.renderAxis(canvas,plotLeft, plotBottom, plotRight, plotBottom); 
			break;
		case BOTTOM:
			categoryAxis.renderAxis(canvas,plotLeft, plotBottom, plotRight, plotBottom); 
			if(getAxesClosedStatus())
				categoryAxis.renderAxis(canvas,plotLeft, plotTop, plotRight, plotTop);
			break;			
		}
		
	}
		
	protected void drawClipDataAxisTickMarks(Canvas canvas)
	{
		
	}
	
	protected void drawClipCategoryAxisTickMarks(Canvas canvas)
	{
		
	}
	
	protected void drawClipLegend(Canvas canvas)
	{
		
	}
	
	protected boolean drawFixedPlot(Canvas canvas)
	{	
		this.mMoveX = this.mMoveY = 0.0f;
		
		//绘制Y轴tick和marks	
		drawClipDataAxisGridlines(canvas);	
				
		//绘制X轴tick和marks	
		drawClipCategoryAxisGridlines(canvas);
		
		//绘图
		drawClipPlot(canvas);
		
		//轴 线
		drawClipAxisLine(canvas);				
			
		//轴刻度
		drawClipDataAxisTickMarks(canvas);	
		drawClipCategoryAxisTickMarks(canvas);
				
		//图例
		drawClipLegend(canvas);		
		return true;
	 }
	
	
	
	public void setXTickMarksOffsetMargin(float margin)
	{
		mxMargin = margin;
	}
	
	public void setYTickMarksOffsetMargin(float margin)
	{
		myMargin = margin;
	}
	
		
	protected float getClipYMargin()
	{
		return getDrawClipVerticalYMargin(); //myMargin; //
	}
	
	protected float getClipXMargin()
	{
		return getDrawClipVerticalXMargin(); //mxMargin; //
	}
	
	
	protected boolean drawClipVerticalPlot(Canvas canvas)
	{				
		//显示绘图区rect
		float offsetX = mTranslateXY[0]; 
		float offsetY = mTranslateXY[1];  
		initMoveXY();
		
		float yMargin = getClipYMargin(); // getDrawClipYMargin
		float xMargin = getClipXMargin();
		

		//设置图显示范围
		canvas.save();
		canvas.clipRect(this.getLeft(), this.getTop(), this.getRight(), this.getBottom());
				
				if( XEnum.PanMode.VERTICAL == this.getPlotPanMode()
						|| XEnum.PanMode.FREE == this.getPlotPanMode() )
				{
					
					//绘制Y轴tick和marks			
					canvas.save();				
					
					canvas.clipRect(plotArea.getLeft() , plotArea.getTop(), 
									plotArea.getRight(), plotArea.getBottom());
					
							canvas.translate(0 , offsetY );				
							
							drawClipDataAxisGridlines(canvas);					
					canvas.restore();	
				}else{					
					drawClipDataAxisGridlines(canvas);	
				}
		
				if( XEnum.PanMode.HORIZONTAL == this.getPlotPanMode()
						|| XEnum.PanMode.FREE == this.getPlotPanMode() )
				{	
					
					//绘制X轴tick和marks			
					canvas.save();		
							canvas.clipRect(plotArea.getLeft() , plotArea.getTop(), 
											plotArea.getRight(), plotArea.getBottom());
							canvas.translate(offsetX,0);
							
							drawClipCategoryAxisGridlines(canvas);
					canvas.restore();
				}else{
					drawClipCategoryAxisGridlines(canvas);
				}
		
		
					//设置绘图区显示范围
					canvas.save();
					canvas.clipRect(plotArea.getLeft()+ 0.5f , plotArea.getTop() + 0.5f, 
									plotArea.getRight() + 0.5f, plotArea.getBottom() + 0.5f );
					
							canvas.save();					
							canvas.translate(mMoveX, mMoveY);
							//绘图
							drawClipPlot(canvas);
							
							canvas.restore();
					canvas.restore();	
	
		
		//还原绘图区绘制
		canvas.restore(); //clip	
			
		//轴 线
		drawClipAxisLine(canvas);		
		/*
		/////////////////////////////////////////
	
		//轴刻度
		if( XEnum.PanMode.VERTICAL == this.getPlotPanMode()
				|| XEnum.PanMode.FREE == this.getPlotPanMode() )
		{			
			//绘制Y轴tick和marks			
			canvas.save();					
				canvas.clipRect(this.getLeft() , plotArea.getTop() - yMargin, 
								this.getRight(), plotArea.getBottom() + yMargin);
					canvas.translate(0 , offsetY );					
					drawClipDataAxisTickMarks(canvas);	
			canvas.restore();	
		}else{			
			drawClipDataAxisTickMarks(canvas);	
		}
	
					
		if( XEnum.PanMode.HORIZONTAL == this.getPlotPanMode()
				|| XEnum.PanMode.FREE == this.getPlotPanMode() )
		{				
			//绘制X轴tick和marks			
			canvas.save();				
				canvas.clipRect(plotArea.getLeft() - xMargin, this.getTop(), 
								plotArea.getRight() + xMargin, this.getBottom());
			
					canvas.translate(offsetX,0);
					drawClipCategoryAxisTickMarks(canvas);	
			canvas.restore();
		}else{
			drawClipCategoryAxisTickMarks(canvas);
		}
		*/
		/////////////////////////////////////////
			
		//图例
		drawClipLegend(canvas);
		
		execGC();
		return true;
	 }
	
	/////////////////////////  
	protected boolean drawClipHorizontalPlot(Canvas canvas)
	 {		
		//显示绘图区rect
		float offsetX = mTranslateXY[0]; 
		float offsetY = mTranslateXY[1]; 					
		initMoveXY();		
				
		float yMargin = getClipYMargin();
		float xMargin = getClipXMargin();
	
		//设置图显示范围
		canvas.save();				
		canvas.clipRect(this.getLeft() , this.getTop() , this.getRight(), this.getBottom());		
				
		if( XEnum.PanMode.HORIZONTAL == this.getPlotPanMode()
				|| XEnum.PanMode.FREE == this.getPlotPanMode() )
		{																	
			//绘制X轴tick和marks			
			canvas.save();							
			canvas.clipRect(plotArea.getLeft() , plotArea.getTop(), 
							plotArea.getRight(), plotArea.getBottom());
					canvas.translate(offsetX,0);
					drawClipDataAxisGridlines(canvas);						
			canvas.restore();	
		}else{
			drawClipDataAxisGridlines(canvas);			
		}
		
		if( XEnum.PanMode.VERTICAL == this.getPlotPanMode()
				|| XEnum.PanMode.FREE == this.getPlotPanMode() )
		{													
			//绘制Y轴tick和marks			
			canvas.save();					
					canvas.clipRect(plotArea.getLeft() , plotArea.getTop(), 
									plotArea.getRight(), plotArea.getBottom());
					canvas.translate(0 , offsetY );					
					drawClipCategoryAxisGridlines(canvas);		
			canvas.restore();	
		}else{
			drawClipCategoryAxisGridlines(canvas);
		}
		//////////////////////////////////////////////////
		
			//////////////////////////////////////////////////								
			//设置绘图区显示范围
			canvas.save();
			canvas.clipRect(plotArea.getLeft() , plotArea.getTop() ,
							this.getRight(), plotArea.getBottom());			
					canvas.save();
					canvas.translate(mMoveX, mMoveY);	
					//绘图
					drawClipPlot(canvas);
					
					canvas.restore();
			canvas.restore();
		
			
		//还原绘图区绘制
		canvas.restore(); //clip							

		//////////////////////////////////////////////////			
		//轴线
		drawClipAxisLine(canvas);
				
		if( XEnum.PanMode.HORIZONTAL == this.getPlotPanMode()
				|| XEnum.PanMode.FREE == this.getPlotPanMode() )
		{																	
			//绘制X轴tick和marks			
			canvas.save();	
					canvas.clipRect(plotArea.getLeft() - xMargin, this.getTop(), 
							plotArea.getRight()+ xMargin, this.getBottom());
					
					canvas.translate(offsetX,0);
					drawClipDataAxisTickMarks(canvas);
			canvas.restore();	
		}else{
			drawClipDataAxisTickMarks(canvas);
		}
						
		
		if( XEnum.PanMode.VERTICAL == this.getPlotPanMode()
				|| XEnum.PanMode.FREE == this.getPlotPanMode() )
		{													
			//绘制Y轴tick和marks			
			canvas.save();			
					
					canvas.clipRect(this.getLeft() , plotArea.getTop() - yMargin, 
									this.getRight(), plotArea.getBottom() + yMargin);
					
					canvas.translate(0 , offsetY );					
					
					drawClipCategoryAxisTickMarks(canvas);					
			canvas.restore();	
		}else{	
			drawClipCategoryAxisTickMarks(canvas);
		}
		
		//////////////////////////////////////////////////
		
		//图例
		drawClipLegend(canvas);	
		
		execGC();
		return true;
	 }
	/////////////////////////

	@Override
	protected boolean postRender(Canvas canvas) throws Exception
	{		
		try{			
			super.postRender(canvas);	
			
			boolean ret = true;
			
			//计算主图表区范围
			 calcPlotRange();
			//画Plot Area背景			
			 plotArea.render(canvas);							 			
			
			//绘制图表
			if(getPanModeStatus())
			{				 
				switch (mDirection) 
				{
					case HORIZONTAL: 										
						ret = drawClipHorizontalPlot(canvas);
						break;
					case VERTICAL: 
						ret = drawClipVerticalPlot(canvas);				
						break;
				}	
			}else{
				ret = drawFixedPlot(canvas);
			}						 
			if(!ret) return ret;
			
			//绘制标题
			 renderTitle(canvas);
			//绘制轴标题
			if(null != axisTitle)
			{
				axisTitle.setRange(this);
				axisTitle.render(canvas);
			}			
			
			//显示焦点
			renderFocusShape(canvas);
			//响应提示
			renderToolTip(canvas);
									
			return ret;
		} catch (Exception e) {
			throw e;
		}
	}
	/////////////////////////////////////////
	
}
