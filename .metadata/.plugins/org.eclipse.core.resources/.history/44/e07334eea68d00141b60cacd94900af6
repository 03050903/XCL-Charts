package com.demo.xclcharts.view;

import java.util.ArrayList;
import java.util.List;

import org.xclcharts.chart.FunnelChart;
import org.xclcharts.chart.FunnelData;
import org.xclcharts.common.DensityUtil;
import org.xclcharts.renderer.XChart;
import org.xclcharts.renderer.XEnum;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;

public class FunnelChart01View extends DemoView {
	private String TAG = "FunnelChart01View";
	private FunnelChart chart = new FunnelChart();
	private List<FunnelData> chartData = new ArrayList<FunnelData>();
	
	public FunnelChart01View(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
		initView();
	}
	
	public FunnelChart01View(Context context, AttributeSet attrs){   
        super(context, attrs);   
        initView();
	 }
	 
	 public FunnelChart01View(Context context, AttributeSet attrs, int defStyle) {
			super(context, attrs, defStyle);
			initView();
	 }
	 
	 private void initView()
	 {
		 	chartDataSet();	
			chartRender();
	 }
	 
	 
	 private void chartRender()
		{
			try {
				
				//设置绘图区默认缩进px值,留置空间显示Axis,Axistitle....		
				int [] ltrb = getBarLnDefaultSpadding();
				chart.setPadding(DensityUtil.dip2px(getContext(), 35),ltrb[1], ltrb[2],  ltrb[3]);	
			
						
				//标题
				chart.setTitle("漏斗图");
				chart.addSubtitle("(XCL-Charts Demo)");	
				//数据源
				chart.setDataSource(chartData);
				
				chart.showBorder();
		
				//隐藏Key
				 //chart.getPlotLegend().hide();
				
				 //禁用平移模式
				// chart.disablePanMode();
				 //竖向移动
				// chart.setPlotPanMode(XEnum.PanMode.VERTICAL);
				
				chart.setSortType(XEnum.SortType.DESC);
		
				 
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	 
	 private void chartDataSet()
	{						
		 /*
		chartData.add(new FunnelData("key1","label1",20,Color.rgb(117, 197, 141)));
		chartData.add(new FunnelData("key2","label2",40,Color.rgb(77, 180, 123)));
		chartData.add(new FunnelData("key3","label3",60,Color.rgb(243, 75, 125)));
		
		chartData.add(new FunnelData("key2","label2",80,Color.RED));
		chartData.add(new FunnelData("key3","label3",100,Color.BLUE));
		*/
		 
		 
		
		 chartData.add(new FunnelData("key2","label80%",80,Color.RED));
			
		 chartData.add(new FunnelData("key3","label60%",60,Color.rgb(243, 75, 125)));
		 chartData.add(new FunnelData("key2","label40%",40,Color.rgb(77, 180, 123)));
		 chartData.add(new FunnelData("key3","label100%",100,Color.BLUE));
		 chartData.add(new FunnelData("key1","label20%",20,Color.rgb(117, 197, 141)));
		 
	}
	 
	@Override  
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {  
        super.onSizeChanged(w, h, oldw, oldh);  
       //图所占范围大小
        chart.setChartRange(w,h);
    }  
	
	@Override
    public void render(Canvas canvas) {
        try{
            chart.render(canvas);
            
        } catch (Exception e){
        	Log.e(TAG, e.toString());
        }
    }

	@Override
	public List<XChart> bindChart() {
		// TODO Auto-generated method stub		
		List<XChart> lst = new ArrayList<XChart>();
		lst.add(chart);		
		return lst;
	}
	
	@Override
	public boolean onTouchEvent(MotionEvent event) {
		// TODO Auto-generated method stub		
		super.onTouchEvent(event);		
		if(event.getAction() == MotionEvent.ACTION_UP) 
		{						
			//triggerClick(event.getX(),event.getY());
		}
		return true;
	}
	
	

}
