package org.xclcharts.chart;

import java.util.List;

import org.xclcharts.common.DrawHelper;
import org.xclcharts.common.MathHelper;

import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.PointF;
import android.util.Log;

public class DountChart3D extends DountChart{
	
	private static final String TAG="DountChart3D";
	
	//渲染层数
	private final int mRender3DLevel = 15; 
	
	public DountChart3D() {
		// TODO Auto-generated constructor stub
		super();	 		
	}
		
	private boolean render3D(Canvas canvas,
			float initOffsetAngle,
			List<PieData> chartDataSource,
			float cirX,float cirY,float radius)
	{		
	float offsetAngle = initOffsetAngle;		
	float currentAngle = 0.0f;	              
	float newRadius = 0.0f;	
	int size = 0;
	
	setInnerRadius(0.5f);
	getInnerPaint().setColor(Color.WHITE);
	
	for(int i=0;i < mRender3DLevel;i++)
	{
		canvas.save(Canvas.MATRIX_SAVE_FLAG);
		canvas.translate(0,mRender3DLevel - i );
		size = chartDataSource.size();
		for(int j=0;j< size;j++)
		{			  
		    PieData cData =  chartDataSource.get(j);			  								
			currentAngle = cData.getSliceAngle();						
			if(!validateAngle(currentAngle)) continue;
			geArcPaint().setColor(cData.getSliceColor());	
			
		    if(cData.getSelected()) //指定突出哪个块
		    {				    			    	
		    	//偏移圆心点位置(默认偏移半径的1/10)
		    	newRadius = div(radius , SELECTED_OFFSET);
		    	 //计算百分比标签
		    	PointF point = MathHelper.getInstance().calcArcEndPointXY(
		    								cirX,cirY,newRadius,
		    								add(offsetAngle, div(currentAngle,2f))); 	
		        			        
		        initRectF("mRectF",sub(point.x, radius) ,sub(point.y , radius),
		        				   add(point.x , radius),add(point.y , radius));
		        
		        canvas.drawArc(mRectF, offsetAngle, currentAngle, true,geArcPaint());
		    }else{
		        canvas.drawArc(mArcRF0, offsetAngle, currentAngle, true,geArcPaint());
		    }			    			    
		    //下次的起始角度  
		    offsetAngle = add(offsetAngle,currentAngle); 
		    
		    canvas.drawCircle(cirX, cirY, 60f, getInnerPaint());	
		   // renderInnderCircle(canvas);
		}
						
		canvas.restore();
		offsetAngle = initOffsetAngle;
	}
	return true;
	}
	
	private boolean renderFlatArcAndLegend(Canvas canvas,
			float initOffsetAngle,
			List<PieData> chartDataSource,
			float cirX,float cirY,float radius)
	{
		float offsetAngle = initOffsetAngle;				
		float currentAngle = 0.0f;	              
		float newRadius = 0.0f;	
		PointF[] arrPoint = new PointF[chartDataSource.size()];
		
		int size = chartDataSource.size();
		for(int j=0;j< size;j++)
		{
			PieData cData = chartDataSource.get(j);	
			currentAngle = cData.getSliceAngle();
			if(!validateAngle(currentAngle)) continue;		  
			geArcPaint().setColor( DrawHelper.getInstance().getDarkerColor(
											(int)cData.getSliceColor()) ); 						
			
			if(cData.getSelected()) //指定突出哪个块
			{					    					    	
				//偏移圆心点位置(默认偏移半径的1/10)
				newRadius = div(radius , SELECTED_OFFSET);
				//计算百分比标签
				PointF point = MathHelper.getInstance().calcArcEndPointXY(
					cirX,cirY,newRadius,add(offsetAngle , div(currentAngle,2f))); 	
				      
				initRectF("mRectF",sub(point.x , radius) ,sub(point.y , radius ),
					   add(point.x , radius ),add(point.y , radius));   
				
				canvas.drawArc(mRectF, offsetAngle, currentAngle, true,geArcPaint());
				
				arrPoint[j] = new PointF(point.x,point.y);
			}else{
				canvas.drawArc(mArcRF0, offsetAngle, currentAngle, true, geArcPaint());
				
				arrPoint[j] = new PointF(cirX,cirY);
			}		
			
			//保存角度
			saveArcRecord(j,cirX+ this.mTranslateXY[0],cirY+ this.mTranslateXY[1],
				radius,offsetAngle,currentAngle);
			
			//下次的起始角度  
			offsetAngle = add(offsetAngle,currentAngle);
		}		
		
		//绘制Label
		renderLabels(canvas,initOffsetAngle,radius,arrPoint);	
		
		//图例
		plotLegend.renderPieKey(canvas,this.getDataSource());	
		arrPoint = null;
		return true;
	}	
	
	@Override 
	protected void renderDount(Canvas canvas)
	{
		/*
		//数据源
 		List<PieData> chartDataSource = this.getDataSource();
 		if(null == chartDataSource)
		{
 			Log.e(TAG,"数据源为空.");
 			return;
		}
 	 		
		//计算中心点坐标		
		float cirX = plotArea.getCenterX();
	    float cirY = plotArea.getCenterY();	     
        float radius = getRadius();
        
        //确定饼图范围       
        initRectF("mArcRF0",sub(cirX , radius) ,sub(cirY , radius),
        					add(cirX , radius),add(cirY , radius)); 
        */
    
				/*
		if(render3D(canvas,mOffsetAngle,chartDataSource,cirX, cirY, radius))
		{
			renderFlatArcAndLegend(canvas,mOffsetAngle,chartDataSource,
											cirX, cirY, radius);
		}
		*/
		
		//super.renderDount(canvas);
		
	}
	
	
	
	@Override 
	protected boolean renderPlot(Canvas canvas)
	{				
		//数据源
 		List<PieData> chartDataSource = this.getDataSource();
 		if(null == chartDataSource)
		{
 			Log.e(TAG,"数据源为空.");
 			return false;
		}
 	 		
		//计算中心点坐标		
		float cirX = plotArea.getCenterX();
	    float cirY = plotArea.getCenterY();	     
        float radius = getRadius();
        
        //确定饼图范围       
        initRectF("mArcRF0",sub(cirX , radius) ,sub(cirY , radius),
        					add(cirX , radius),add(cirY , radius)); 
    
				
		if(render3D(canvas,mOffsetAngle,chartDataSource,cirX, cirY, radius))
		{
			return renderFlatArcAndLegend(canvas,mOffsetAngle,chartDataSource,
											cirX, cirY, radius);
		}else{
			return false;
		}
		
		
	} 
	
	
}
