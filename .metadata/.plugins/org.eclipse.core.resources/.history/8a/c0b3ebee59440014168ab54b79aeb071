/**
 * Copyright 2014  XCL-Charts
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 	
 * @Project XCL-Charts 
 * @Description Android图表基类库
 * @author XiongChuanLiang<br/>(xcl_168@aliyun.com)
 * @license http://www.apache.org/licenses/  Apache v2 License
 * @version 1.7
 */
package org.xclcharts.renderer.plot;

import java.util.ArrayList;

import org.xclcharts.common.DrawHelper;
import org.xclcharts.renderer.XEnum;
import org.xclcharts.renderer.line.PlotDot;
import org.xclcharts.renderer.line.PlotDotRender;

import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.PointF;
import android.graphics.RectF;
import android.util.Log;

/**
 * @ClassName ToolTip
 * @Description ToolTips基类
 * @author XiongChuanLiang<br/>(xcl_168@aliyun.com)
 *  
 */
public class ToolTip {
	
	private static final String TAG="ToolTip";
	
	//XEnum.DotStyle  dotStyle,String text,Paint paint
	private ArrayList<PlotDot> mClickedDotStyle = null;
	private ArrayList<String> mClickedText = null;
	private ArrayList<Paint> mClickedPaint = null;
	private PointF mClickedXY = null;
	
	RectF mRect = new RectF();
	
	private float mWidth = 100f;	
	private float mRowSpan = 0.0f;
	
	private Paint mPaintBorder = null;
	private Paint mPaintBackground = null;
	
	private float mMargin = 10.f;
	
	public ToolTip()
	{
		
	}
	
	public void setClikedXY(float x,float y)
	{
		if(null == mClickedXY) mClickedXY = new PointF();
		mClickedXY.x = x;
		mClickedXY.y = y;
	}
		
	public void addHint(String text,Paint paint)
	{
		PlotDot dot = new PlotDot();
		dot.setDotStyle(XEnum.DotStyle.HIDE);
		addHint(dot,text,paint);
	}
	
	public void addHint(PlotDot dotStyle,String text,Paint paint)
	{
		if(null == mClickedDotStyle) mClickedDotStyle = new ArrayList<PlotDot>();
		if(null == mClickedText) mClickedText = new ArrayList<String>();
		if(null == mClickedPaint) mClickedPaint = new ArrayList<Paint>();
		
		mClickedDotStyle.add(dotStyle);
		mClickedText.add(text);
		mClickedPaint.add(paint);		
	}
	
	private boolean validateParams()
	{		
		if(null == mClickedXY)
		{
			Log.e(TAG,"没有传入点击坐标.");
			return false;
		}
		if(null == mClickedPaint)
		{
			Log.e(TAG,"没有传入画笔.");
			return false;
		}		
		return true;		
	}
	
	private void initRect()
	{
		float totalHeight = getTotalHeight();
		float halfWidth = mWidth/2;
		mRect.left = mClickedXY.x - halfWidth;
		mRect.right = mClickedXY.x + halfWidth;
		mRect.top = mClickedXY.y - totalHeight;
		mRect.bottom = mClickedXY.y;
	}
	
	private void getContentWidth()
	{
		if(validateParams() == false)return ;
		
		int countDots = mClickedDotStyle.size();
		int countPaint = mClickedPaint.size();
		int countText = mClickedText.size();
		
		float textWidth = 0.0f,textHeight =0.0f;
		Paint paint = null;	
		
		for(int i=0;i<countText;i++)
		{
			if(countPaint > i) paint = mClickedPaint.get(i);
			if(null == paint) break;
			
			
			textHeight = DrawHelper.getInstance().getPaintFontHeight(paint);
			textWidth = DrawHelper.getInstance().getTextWidth(paint, mClickedText.get(i));	
			textWidth += 2*textWidth;
			
			if(countDots > i)
			{
				//画dot
				PlotDotRender.getInstance().renderDot(canvas, mClickedDotStyle.get(i), 
									currDotsX, currRowY, 
									currDotsX + 2*textHeight, currRowY + textHeight, paint);			
			}
			
			canvas.drawText(mClickedText.get(i), mClickedXY.x, currRowY,paint);
			
			currRowY += textHeight + mRowSpan;			
		}	
		
	}
	
	
	public void showHint(Canvas canvas) //hint  ToolTips
	{
		if(validateParams() == false)return ;
		
		initRect();
		
		//float rectWidth = getContentWidth();
	
		int countDots = mClickedDotStyle.size();
		int countPaint = mClickedPaint.size();
		int countText = mClickedText.size();
		
		canvas.drawRect(mRect, this.getBackgroundPaint());				
		canvas.drawRect(mRect, this.getPaintBorder());
		
		//canvas.drawRoundRect(mRect, rx, ry, this.mPaintBackground);
		
		// dots(1/3)  text(1/2)
		
		//float currX = mRect.left + 10f,currY = mRect.top + 0.0f;
		Paint paint = null;		
		
		float currDotsX = mRect.left + mMargin;
		float currRowY = mRect.top + mMargin;
		float textHeight = 0.0f;	

		for(int i=0;i<countText;i++)
		{
			if(countPaint > i) paint = mClickedPaint.get(i);
			if(null == paint) break;
			
			textHeight = DrawHelper.getInstance().getPaintFontHeight(paint);			
			if(countDots > i)
			{
				//画dot
				PlotDotRender.getInstance().renderDot(canvas, mClickedDotStyle.get(i), 
									currDotsX, currRowY, 
									currDotsX + 2*textHeight, currRowY + textHeight, paint);			
			}
			
			canvas.drawText(mClickedText.get(i), mClickedXY.x, currRowY,paint);
			
			currRowY += textHeight + mRowSpan;			
		}				
	}
	
	private float getTotalHeight()
	{
		if(null == mClickedPaint)return 0.0f;
		float total = 0.0f;
		for(Paint paint : mClickedPaint)
		{			
			total += DrawHelper.getInstance().getPaintFontHeight(paint) + mRowSpan;
		}
		
		return total;
	}
		
	
	
	
	public Paint getPaintBorder()
	{
		if(null == mPaintBorder)
		{
			mPaintBorder = new Paint(Paint.ANTI_ALIAS_FLAG);
			mPaintBorder.setStyle(Style.STROKE);
		}
		
		return mPaintBorder;
	}

	/**
	 * 开放背景画笔
	 * 
	 * @return 画笔
	 */
	public Paint getBackgroundPaint() {
		if(null == mPaintBackground)
		{
			mPaintBackground  = new Paint(Paint.ANTI_ALIAS_FLAG);
			mPaintBackground.setAlpha(100);
			mPaintBackground.setColor(Color.YELLOW);
		}
		return mPaintBackground;			
	}
	
	
	public void setWidth(float width)
	{
		mWidth = width;
	}
	

}
