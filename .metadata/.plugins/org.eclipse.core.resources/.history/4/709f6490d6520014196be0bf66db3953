package org.xclcharts.renderer.plot;

import org.xclcharts.common.MathHelper;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Align;

public class LabelLineRender extends LabelLine{
	
	public LabelLineRender()
	{
		super();
	}
	

	
	protected void renderLabelLine(String text,
			float cirX,float cirY,float radius,float calcAngle,Canvas canvas,Paint paintLabel )
	{
		
			//显示在扇形的外部
			//1/4处为起始点
			float calcRadius = MathHelper.getInstance().sub(radius  , radius / 4f);
			MathHelper.getInstance().calcArcEndPointXY(
											cirX, cirY, calcRadius, calcAngle);	
			
			float startX = MathHelper.getInstance().getPosX();
			float startY = MathHelper.getInstance().getPosY();
				    
		    //延长原来半径的一半在外面
		    calcRadius =  radius / 2f;		
		    MathHelper.getInstance().calcArcEndPointXY(startX, startY, calcRadius, calcAngle);			
			float stopX = MathHelper.getInstance().getPosX();
		    float stopY = MathHelper.getInstance().getPosY();
		    //连接线
		    canvas.drawLine(startX, startY,stopX, stopY, getLabelLinePaint());	
		    
		    float borkenline = getBrokenLine(); //折线长度
		    		    
		    float endX = 0.0f;			    
		    if(Float.compare(stopX, cirX) == 0){ //位于中间竖线上				    			    	
		    	if(Float.compare(stopY, cirY) == 1 ) //中点上方,左折线
		    	{
		    		paintLabel.setTextAlign(Align.LEFT);
		    		endX = stopX + borkenline;	
		    	}else{ //中点下方,右折线		    		
		    		endX = stopX - borkenline;	
		    		paintLabel.setTextAlign(Align.RIGHT);
		    	}
		    }else if(Float.compare(stopY, cirY) == 0 ){ //中线横向两端
		    	
		    	if(Float.compare(stopX, cirX) == 0 ||
		    			Float.compare(stopX, cirX) == -1) //左边
		    	{
		    		paintLabel.setTextAlign(Align.RIGHT);
		    	}else{
		    		paintLabel.setTextAlign(Align.LEFT);
		    	}		    	
		    	endX = stopX;		    
		    }else if(Float.compare(stopX + borkenline, cirX) == 1 ) //右边
		    {
		    	paintLabel.setTextAlign(Align.LEFT);
		    	endX = stopX + borkenline;		    		    	
		    }else if(Float.compare(stopX - borkenline,cirX) == -1  ) //左边
		    {
		    	paintLabel.setTextAlign(Align.RIGHT);
		    	endX = stopX - borkenline;		    			    	    
		    }else {
		    	endX = stopX;
		    	paintLabel.setTextAlign(Align.CENTER);
		    }
	
	//转折线
    canvas.drawLine(stopX, stopY, endX, stopY, 
    					getLabelLinePaint());
      	
    //NONE,BEGIN,END,ALL
    switch(getLinePointStyle())
    {
	    case NONE:
	    	break;
	    case BEGIN:
	    	
	    	 canvas.drawCircle( startX, startY, 
		 	    		getRadius(),getPointPaint());
		    	
	    	 
	    	break;
	    case END:
	    	 canvas.drawCircle( stopX, stopY, 
	 	    		getRadius(), getPointPaint());
	    	
	    	 
	    	 break;
	    case ALL:
	    	
	    	 canvas.drawCircle( startX, startY, 
		 	    		getRadius(), getPointPaint());
		    	
	    	 
	    	 canvas.drawCircle( stopX, stopY, 
	 	    		getRadius(), getPointPaint());
	    	break;
	    default:
	    	break;	    		
    }
   // canvas.drawCircle( endX, stopY, 
   // 		getLabelLine().getRadius(), getLabelLine().getPointPaint());
    
    //标签
    canvas.drawText(text,endX, stopY,paintLabel); 
}

}
