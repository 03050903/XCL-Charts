/**
 * Copyright 2014  XCL-Charts
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 	
 * @Project XCL-Charts 
 * @Description Android图表基类库
 * @author XiongChuanLiang<br/>(xcl_168@aliyun.com)
 * @license http://www.apache.org/licenses/  Apache v2 License
 * @version 1.0
 */

package org.xclcharts.chart;

import java.util.ArrayList;
import java.util.List;

import org.xclcharts.common.MathHelper;
import org.xclcharts.renderer.XEnum;
import org.xclcharts.renderer.XEnum.Location;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.graphics.PointF;

/**
 * @ClassName DountChart
 * @Description  环形图基类
 * @author XiongChuanLiang<br/>(xcl_168@aliyun.com)
 *  
 */

public class DountChart  extends PieChart{	

	//内环半径
	private int mFillRadius = 0;	
	private float mInnerSize = 0.8f;
	
	//内环填充颜色
	private Paint mPaintFill = null;
	
	private Paint mPaintCenterText;
	private String mCenterText = "";
	
	private List<Location> mAttrInfoLocation = null;
	private List<String> mAttrInfo = null;
	private List<Float> mAttrInfoPostion = null;	
	private List<Paint> mAttrInfoPaint = null;
	

	public DountChart()
	{
		super();	
		initChart();
	}
	
	private void initChart()
	{
		int fillColor = this.plotArea.getBackgroundPaint().getColor();
		
		mPaintFill = new Paint();
		mPaintFill.setColor(fillColor); 
		mPaintFill.setAntiAlias(true);
		
		mPaintCenterText = new Paint();
		mPaintCenterText.setAntiAlias(true);
		mPaintCenterText.setTextSize(28);
		mPaintCenterText.setTextAlign(Align.CENTER);
		
		this.setLabelPosition(XEnum.SliceLabelPosition.OUTSIDE);
	}
	
	/**
	 * 环内部填充画笔
	 * @return 画笔
	 */
	public Paint getInnerPaint()
	{
		return mPaintFill;
	}
		
	/**
	 * 设置环内部填充相对于环所占的比例
	 * @param precentage 环所占比例
	 */
	public void setInnerSize(float precentage)
	{
		mInnerSize = precentage;
	}
	
	/**
	 * 计算出环内部填充圆的半径
	 * @return 环的半径
	 */
	public float calcInnerRadius()
	{
		mFillRadius =  (int) MathHelper.getInstance().round( mul(getRadius(),mInnerSize), 2);
		return mFillRadius;
	}
	
	/**
	 * 开放绘制中心文字的画笔 
	 * @return 画笔 
	 */
	public Paint getCenterTextPaint()
	{
		return mPaintCenterText;
	}
	
	/**
	 * 设置中心点文字
	 * @param text 文字
	 */
	public void setCenterText(String text)
	{
		mCenterText = text;
	}
	
	
	 /**
	  * 清掉所有附加信息
	  */
	 public void clearPlotAttrInfo()
	 {
		if(null != mAttrInfoLocation) mAttrInfoLocation.clear();	
		if(null != mAttrInfo) mAttrInfo.clear();	
		if(null != mAttrInfoPostion) mAttrInfoPostion.clear();	
		if(null != mAttrInfoPaint) mAttrInfoPaint.clear();	
	 }		
	 
	 /**
	  * 增加附加信息
	  * @param position		显示方位
	  * @param info			附加信息
	  * @param infoPosRadiusPercentage	信息显示在总半径指定比例所在位置
	  * @param paint		用来绘制用的画笔
	  */
    public void addAttributeInfo(Location  position ,String info,
    		float infoPosRadiusPercentage  ,Paint paint) { 
    	
    	if(null == mAttrInfoLocation) mAttrInfoLocation = new ArrayList<Location> ();
    	if(null == mAttrInfo) mAttrInfo = new ArrayList<String>();
    	
    	if(null == mAttrInfoPostion) mAttrInfoPostion = new ArrayList<Float>();    	
    	if(null == mAttrInfoPaint) mAttrInfoPaint = new ArrayList<Paint>();
    	    	
    	mAttrInfoLocation.add(position);
    	mAttrInfo.add(info);
    	mAttrInfoPostion.add(infoPosRadiusPercentage);
    	mAttrInfoPaint.add(paint);    	
    }
	
	
private void renderAttrInfo(Canvas canvas)
	{		
		if(null == mAttrInfo) return ;
		if(null == mAttrInfoLocation) return ;
		float radius = 0.0f; 
		String info = "";				
		PointF pos = new PointF();
	
		for(int i=0;i<mAttrInfo.size();i++)
		{
			info = mAttrInfo.get(i);
			if("" == info) continue;
			
			if(null == mAttrInfoPostion || mAttrInfoPostion.size() < i)continue;	
			if(null == mAttrInfoPaint.get(i) || mAttrInfoPaint.size() < i) continue;
			
			pos.x =  plotArea.getCenterX();
			pos.y =  plotArea.getCenterY();
			
			radius = this.getRadius() * mAttrInfoPostion.get(i);
			switch(mAttrInfoLocation.get(i))
			{
				case TOP:
					pos.y =  plotArea.getCenterY() - radius;
					break;
				case BOTTOM:
					pos.y =  plotArea.getCenterY() + radius;
					break;
				case LEFT:
					pos.x =  plotArea.getCenterX() - radius;
					break;
				case RIGHT:
					pos.x =  plotArea.getCenterX() + radius;
					break;
			}	    							
			canvas.drawText(info, pos.x, pos.y, mAttrInfoPaint.get(i));
		}
		
		mAttrInfoLocation.clear();
		mAttrInfo.clear();
		mAttrInfoPostion.clear();
		mAttrInfoPaint.clear();
	}
	 
	
	/**
	 * 绘制中心点
	 * @param canvas 画布
	 */
	private void renderCenterText(Canvas canvas)
	{		
		if(mCenterText.length() > 0 )
			canvas.drawText(mCenterText, 
				plotArea.getCenterX(), plotArea.getCenterY(), mPaintCenterText);
	}

	/**
	 * 绘制图 -- 环形图的标签处理待改进 ***
	 */
	@Override
	protected boolean renderPlot(Canvas canvas)
	{
		 super.renderPlot(canvas);
		//中心点坐标
		 float cirX = plotArea.getCenterX();
	     float cirY = plotArea.getCenterY();
	     
	     calcInnerRadius();
	     canvas.drawCircle(cirX, cirY, mFillRadius, mPaintFill);   
	     
	     //绘制附加信息
		 renderAttrInfo(canvas);
		 //中心文本	
	     renderCenterText(canvas);
	     return true;
	}	

}
