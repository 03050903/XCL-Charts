package org.xclcharts.renderer.axis;

import java.util.ArrayList;
import java.util.List;

import org.xclcharts.common.DrawHelper;
import org.xclcharts.common.MathHelper;

import android.graphics.Canvas;
import android.util.Log;

public class RoundAxisRender extends RoundAxis{
	
	
	public RoundAxisRender()
	{
		super();
	}
	
	 public boolean renderTicks(Canvas canvas,List<String> labels)
		{
		  
		  	float cirX = mCirX;
			float cirY = mCirY; 
			float totalAngle = this.mTotalAngle;
			float initAngle = this.mInitAngle;			
			
			int count = labels.size();				
			float stepsAngle =  MathHelper.getInstance().div(totalAngle,count - 1 ) ;				
			
			float innerRadius1 = mRadius ; //this.mRadius * 0.6f; // MathHelper.getInstance().mul(getRadius(),0.6f); 
			float tickRadius = mRadius * 0.9f;  //mRadius * 0.5f; // MathHelper.getInstance().mul(getRadius(),0.5f); 
			float detailsRadius = tickRadius; 
			if(1 < mDetailModeSteps) detailsRadius = mRadius * 0.95f; //mRadius * 0.5f; //MathHelper.getInstance().mul(getRadius(),0.55f); 
			
			int steps = mDetailModeSteps;
			float Angle = 0.0f;							
			
			for(int i=0;i<count;i++)
			{					
					if(0 == i)
					{
						Angle = initAngle;
					}else{
						Angle = (float) MathHelper.getInstance().add(initAngle, i *stepsAngle);													
					}									
					
					MathHelper.getInstance().calcArcEndPointXY(cirX, cirY, innerRadius1, Angle); 								
					float startX = MathHelper.getInstance().getPosX();
					float startY = MathHelper.getInstance().getPosY();
					
					float stopX = 0.0f,stopY = 0.0f;
					float labelX = 0.0f,labelY = 0.0f;
										
					MathHelper.getInstance().calcArcEndPointXY(cirX, cirY,tickRadius, Angle); 	
					labelX = MathHelper.getInstance().getPosX();
					labelY = MathHelper.getInstance().getPosY();
										
					if(steps != mDetailModeSteps )
					{
						MathHelper.getInstance().calcArcEndPointXY(cirX, cirY, detailsRadius , Angle); 	
						stopX = MathHelper.getInstance().getPosX();
						stopY = MathHelper.getInstance().getPosY();
						
						steps = 0;
					}else{												
						stopX = labelX;
						stopY = labelY;						
					}
					
					if (getTickMarksVisible()) {
						canvas.drawLine(startX, startY, stopX, stopY, getTickMarksPaint());
					}
									
					if (getTickLabelVisible()) 
					{
						 String label = getFormatterLabel(labels.get(i));						
						 float labelWidth =DrawHelper.getInstance().getTextWidth(getTickLabelPaint(), label);
						 
						 if(Float.compare(totalAngle, Angle) == 0 ){
							 labelY += DrawHelper.getInstance().getPaintFontHeight(getTickLabelPaint()) ;
						 }else if( Float.compare(totalAngle, Angle) ==  1 )
						 {
							 labelX +=  labelWidth/2 ;
						 }else{
							 labelX -=  labelWidth/2 ;
						 }	
						 						
						//定制化显示格式	 Angle* -2
						DrawHelper.getInstance().drawRotateText(label,labelX , labelY,
												getTickLabelRotateAngle(), canvas, getTickLabelPaint());
						
					}
										
					steps++;
			} //end for
			return true;
		}	

	
	  /*
	  	
	  
	  	*/
	  
	  //tickAxis
		public boolean renderTickAxis(Canvas canvas) throws Exception
		{
			
			if(!getVisible()) return false;			
			if(null == mLabels) return false;
						
			if(getAxisLineVisible())
			{
				DrawHelper.getInstance().drawPathArc(canvas, this.getAxisPaint(),
								this.mCirX,this.mCirY,this.mRadius,this.mInitAngle, this.mTotalAngle);							
			}
			
			return renderTicks(canvas,this.mLabels);
		}
		
	  	
		
		//TICKAXIS,RINGAXIS,LENAXIS
		
		//arcline
		public boolean renderArcLineAxis(Canvas canvas) throws Exception
		{			
			if(getVisible() && getAxisLineVisible())
			{
				DrawHelper.getInstance().drawPathArc(canvas, this.getAxisPaint() 
								,mCirX, mCirY, mRadius,this.mInitAngle, this.mTotalAngle);
			}
			return true;
		}
		
		//ringAxis
		public boolean renderRingAxis(Canvas canvas) throws Exception
		{
			if(!getVisible()|| !getAxisLineVisible()) return true;
			
			if(null == mAngle) return false;
									
			int angleCount = 0;
			int colorCount = 0;
			int labelsCount = 0;
						
			 angleCount = this.mAngle.size();
			 if(null != mColor)colorCount = this.mColor.size();
			 if(null != mLabels)labelsCount = this.mLabels.size();
			
			float offsetAngle = this.mInitAngle;
			int currentColor = -1;
			String currentLabel = "";
								
			for(int i=0;i<angleCount;i++)
			{				
				if(null != mColor && colorCount > i) currentColor = mColor.get(i);
				if(null != mLabels && labelsCount > i)currentLabel = mLabels.get(i);				
				float sweepAngle = mAngle.get(i);				
				
				renderPartitions(canvas,offsetAngle,sweepAngle,currentColor,currentLabel) ;
				offsetAngle = MathHelper.getInstance().add(offsetAngle, sweepAngle);
				currentColor = -1;
				currentLabel = "";
			}
			
			if(Float.compare(mInnerRadiusPercentage , 0.0f) != 0 && Float.compare(mInnerRadiusPercentage , 0.0f) == 1)
			{				
				float innerRadius =  this.mOrgRadius * mInnerRadiusPercentage;				
				canvas.drawCircle(this.mCirX, mCirY, innerRadius, this.getFillAxisPaint());
			}
			
			
			return true;
		}
		
		
		
		
		/**
		 * 绘制颜色分区轴
		 * @throws Exception
		 */
		private boolean renderPartitions(Canvas canvas,float startAngle,float sweepAngle,
														int color,String label) throws Exception
		{		
				     
			if(-1 != color) getAxisPaint().setColor(color);
		   		     
			
			 if(Float.compare(sweepAngle, 0.0f) < 0){
					Log.e(TAG,"负角度???!!!");
					return false;
			 }else if(Float.compare(sweepAngle, 0.0f) == 0){
				 	Log.w(TAG,"零角度???!!!");
					return true;
			 }			 
			 
			 DrawHelper.getInstance().drawPercent(canvas, this.getAxisPaint(),
					 						this.mCirX, this.mCirY,mRadius, startAngle, sweepAngle, true);
			 
			
			 
			 
			if (getTickLabelVisible() && ""!= label) 
			{
			 	float Angle = MathHelper.getInstance().add(startAngle , sweepAngle / 2) ; 
			 	MathHelper.getInstance().calcArcEndPointXY(this.mCirX, this.mCirY, mRadius * 0.5f,Angle ); 	
			 	
			 	float labelX = MathHelper.getInstance().getPosX();
			 	float labelY = MathHelper.getInstance().getPosY();					
					 						
				//定制化显示格式	 Angle* -2
				DrawHelper.getInstance().drawRotateText(getFormatterLabel(label) ,labelX , labelY,
										getTickLabelRotateAngle(), canvas, getTickLabelPaint());		
			}
			 
			 return true;		 
		}
		
		
		  public void setCenterXY(float x,float y)
		  {
			  mCirX = x;
			  mCirY = y;
		  }
		  
		  public void setOrgRadius(float radius)
		  {
			  mOrgRadius = radius;
		  }
		  
		  
		//  public void setRadius(float radius)
		//  {
		//	  mRadius = radius;
		 // }
		  
		  
		  
		  		  
		  public void setAngleInfo(float totalAngle,float initAngle)
		  {
				mTotalAngle = totalAngle;
				mInitAngle = initAngle;
		  }		  
		 		  
		  public void setAxisAngle(List<Float> angle)
		  {
			  if(null != mAngle) mAngle.clear();	
			  if(null == mAngle) mAngle = new ArrayList<Float>();			  
			 		  
			  mAngle = angle;
		  }
		  
		  public void setAxisColor(List<Integer> color)
		  {
			  if(null != mColor) mColor.clear();
			  if(null == mColor) mColor = new ArrayList<Integer>();
			  
			  mColor = color;
		  }
		  
		  public void setAxisLabels(List<String> labels)
		  {
			  if(null != mLabels) mLabels.clear();
			  if(null == mLabels) mLabels = new ArrayList<String>();
			 
			  mLabels = labels;
		  }
		  
		
		public boolean render(Canvas canvas) throws Exception
		{
				boolean ret = false;
				
				//if(Float.compare(mRadius,0.0f) == 0) mRadius = mOrgRadius;
				
				mRadius = mOrgRadius * mRadiusPercentage; 
				
				// TICKAXIS,RINGAXIS,LENAXIS
				 switch(mAxisType)
				 {
				 case TICKAXIS:					
					 ret = renderTickAxis(canvas);
					 break;
				 case RINGAXIS:					
					 ret = renderRingAxis(canvas);
					 break;
				 case ARCLINEAXIS:					 
					 ret = renderArcLineAxis(canvas);					 
					 break;
				 default:
					 break;
				 }
			 return ret;
		}
	
	

}
