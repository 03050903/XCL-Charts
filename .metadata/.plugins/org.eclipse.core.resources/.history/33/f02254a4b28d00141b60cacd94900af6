package org.xclcharts.chart;

import java.util.Collections;
import java.util.List;

import org.xclcharts.common.DrawHelper;
import org.xclcharts.renderer.EventChart;
import org.xclcharts.renderer.XEnum;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PointF;
import android.graphics.Paint.Align;
import android.util.Log;

public class FunnelChart extends EventChart {
	
	private  static final String TAG = "FunnelChart";
	
	private List<FunnelData> mDataSet;
	private XEnum.SortType mSortType = XEnum.SortType.DESC;
		
	//图的初始宽度
	private float mPlotWidthPercent = 100.f;
	private Paint mPaint = null;
	private Paint mPaintLabel = null;
	
	//同步标签颜色
	private boolean mIsLabelLineSyncColor = false;
	private boolean mIsLabelSyncColor = false;
	private boolean mIsShowLabelLine = false;
	private XEnum.HorizontalAlign mLabelAlign = XEnum.HorizontalAlign.CENTER;
		
	
	public FunnelChart() {		
		
		//初始化图例
		if(null != plotLegend)
		{
			plotLegend.show();
			plotLegend.setType(XEnum.LegendType.ROW);
			plotLegend.setHorizontalAlign(XEnum.HorizontalAlign.CENTER);
			plotLegend.setVerticalAlign(XEnum.VerticalAlign.BOTTOM);
			plotLegend.showBox();
			plotLegend.hideBackground();
		}
				
	}
	
	@Override
	public XEnum.ChartType getType()
	{
		return XEnum.ChartType.FUNNEL;
	}
	
	public Paint getPaint()
	{
		if(null == mPaint)mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
		return mPaint;
	}
	
	/**
	 * 开放标签画笔
	 * @return 画笔
	 */
	public Paint getLabelPaint()
	{
		if(null == mPaintLabel)mPaintLabel = new Paint(Paint.ANTI_ALIAS_FLAG);
		return mPaintLabel;
	}
		
	/**
	 * 设置用于绘图的宽度比例
	 * @param percent 比例
	 */
	private void setPlotWidthPercent(float percent)
	{
		mPlotWidthPercent = percent;
	}
	
	public void setSortType(XEnum.SortType type)
	{
		mSortType = type;
	}
	
	public void hideLabelLine()
	{
		mIsShowLabelLine = false;
	}
	
	public void showLabelLine()
	{
		mIsShowLabelLine = true;
	}
	
	public boolean isShowLabelLine()
	{
		return mIsShowLabelLine;
	}

	/**
	 * 设置是否在线上显示标签
	 * @param visible 是否显示
	 */
	public void setLabelVisible(boolean visible) 
	{
		mLabelVisible = visible;
	}
	
	/**
	 * 返回是否在线上显示标签
	 * @return 是否显示
	 */
	public boolean getLabelVisible()
	{
		return mLabelVisible;
	}
	
	
	public void setLabelAlign(XEnum.HorizontalAlign align)
	{
		mLabelAlign = align;
		
		switch(mLabelAlign)
		{
			case LEFT:
				getLabelPaint().setTextAlign(Align.LEFT);
				showLabelLine();
				break;
			case CENTER:
				getLabelPaint().setTextAlign(Align.CENTER);
				break;
			case RIGHT:
				getLabelPaint().setTextAlign(Align.RIGHT);
				showLabelLine();
				break;
			default:	
				getLabelPaint().setTextAlign(Align.CENTER);
		}
		
	}
	
	public XEnum.HorizontalAlign getLabelAlign()
	{
		return mLabelAlign;
	}
	
	/**
	 * 返回图的数据源
	 * @return 数据源
	 */
	public List<FunnelData> getDataSource() {
		return mDataSet;
	}
	
	public void setDataSource(List<FunnelData> dataSet)
	{
		mDataSet = dataSet;
	}
	
	private boolean sortDataSet()
	{		
		if(null == mDataSet)
		{
			Log.e(TAG,"数据源为空!");
			return false;
		}		
					
		for(int i= mDataSet.size()- 1;i >= 0;i--)
		{
			FunnelData d = mDataSet.get(i);
			if( Float.compare(d.getData(), 0.0f) == -1 
					||  Float.compare(d.getData(), 0.0f) == 0)
			{
				mDataSet.remove(i);
			}		
		}
		if( mDataSet.size() == 0) return false;			
		if( XEnum.SortType.NORMAL != mSortType)Collections.sort(mDataSet);		
		return true;
	}
	
	
	private void drawTriangle(Canvas canvas,
					float cx,PointF start,PointF stop)
	{
		
		Path path = new Path();
		path.moveTo(start.x,start.y);
		path.lineTo(stop.x,stop.y);
		
		switch(mSortType){
			case DESC:
				path.lineTo(cx,plotArea.getBottom());
				break;
			case ASC:
			case NORMAL:
			default:
				path.lineTo(cx,plotArea.getTop() );
		}						
		path.close();
		getPaint().setColor( mDataSet.get(0).getColor());
		canvas.drawPath(path, getPaint());		
	}
	
	private float getHalfWidth(float funnelWidth,float data)
	{
		return funnelWidth  * (data/100) /2;
	}
	
	protected void renderPlotDesc(Canvas canvas,float cx,float funnelWidth,float funnelHeight)
	{
		int count = mDataSet.size();
		float halfWidth = 0.f;
		float bottomY = plotArea.getBottom();
		
		PointF pStart = new PointF();
		PointF pStop = new PointF();		
		
		pStart.x = cx - plotArea.getPlotWidth()/2;
		pStop.x = cx + plotArea.getPlotWidth()/2;
		pStart.y = pStop.y = plotArea.getBottom();
		
		halfWidth = funnelWidth /2;
		
		float labelY = 0.f;
		
		for(int i=0;i<count;i++)
		{
			FunnelData d = mDataSet.get(i);
			
			Path path = new Path();						
			if(i == 0)
			{					
				path.moveTo(cx,plotArea.getBottom());
			}else{					
				path.moveTo(pStart.x,pStart.y);
				path.lineTo(pStop.x,pStop.y);
			}	
			halfWidth = getHalfWidth(funnelWidth,d.getData());
		
			bottomY = sub(plotArea.getBottom(),i * funnelHeight);		
			
			labelY = bottomY - funnelHeight/2;	
						
			pStart.x = cx - halfWidth;
			pStart.y = bottomY - funnelHeight;
			
			pStop.x = cx + halfWidth;
			pStop.y = bottomY - funnelHeight;		
							
			path.lineTo(pStop.x,pStop.y);
			path.lineTo(pStart.x,pStart.y);
			
			this.getPaint().setColor(d.getColor());			
			path.close();
			if(d.getAlpha() != -1)getPaint().setAlpha(d.getAlpha());	
			canvas.drawPath(path, this.getPaint());	
			renderLabels(canvas,d.getLabel(),cx,labelY);
		}				
	}
	
	protected void renderPlotAsc(Canvas canvas,float cx,float funnelWidth,float funnelHeight)
	{
		int count = mDataSet.size();
		float halfWidth = 0.f;
		float bottomY = plotArea.getBottom();
		
		PointF pStart = new PointF();
		PointF pStop = new PointF();
					
		pStart.x = cx - plotArea.getPlotWidth()/2;
		pStop.x = cx + plotArea.getPlotWidth()/2;		
		pStart.y = pStop.y =   plotArea.getBottom();
				
		float labelY = 0.f;
		halfWidth = funnelWidth /2;
		
		for(int i=0;i<count;i++)
		{
			FunnelData d = mDataSet.get(i);			
			Path path = new Path();														
			if(i == 0)//三角
			{					
				path.moveTo(cx,plotArea.getTop());					
			}else{					
				path.moveTo(pStart.x,pStart.y);
				path.lineTo(pStop.x,pStop.y);										
			}			
			
			halfWidth = getHalfWidth(funnelWidth,d.getData());							
			bottomY = add(plotArea.getTop(),i * funnelHeight);
			
			labelY = bottomY + funnelHeight/2;	
			
			pStart.x = cx - halfWidth;
			pStart.y = bottomY + funnelHeight;
			
			pStop.x = cx + halfWidth;
			pStop.y = bottomY + funnelHeight;
														
			path.lineTo(pStop.x,pStop.y);
			path.lineTo(pStart.x,pStart.y);
			
			this.getPaint().setColor(d.getColor());			
			
			if(d.getAlpha() != -1)getPaint().setAlpha(d.getAlpha());			
			path.close();
			canvas.drawPath(path, this.getPaint());					
			if(d.getAlpha() != -1)getPaint().setAlpha(255);
			renderLabels(canvas,d.getLabel(),cx, labelY);
		}				
	}
	
	private void renderPlotOne(Canvas canvas,float cx,float funnelWidth,float funnelHeight)
	{			
			FunnelData d = mDataSet.get(0);
			float halfWidth = getHalfWidth(funnelWidth,d.getData());
			
			PointF pStart = new PointF();
			PointF pStop = new PointF();
			
			pStart.x = cx - halfWidth;
			pStop.x = cx + halfWidth;			
			
			if(XEnum.SortType.DESC == mSortType)
			{
				pStart.y = pStop.y = plotArea.getTop();
			}else{
				pStart.y = pStop.y =   plotArea.getBottom();
			}									
			if(d.getAlpha() != -1)getPaint().setAlpha(d.getAlpha());	
			drawTriangle(canvas,cx, pStart,pStop );
			if(d.getAlpha() != -1)getPaint().setAlpha(255);
			
			float labelY = plotArea.getBottom() - plotArea.getHeight()/2;	
			
			if(d.getLabelVisible())
				renderLabels(canvas,d.getLabel(),cx, labelY);
			return ;				
	}
	
	protected void renderLabels(Canvas canvas,String label,float cx,float y)
	{		
		if("" == label) return;
						
		if(isShowLabelLine())
		{
			float labelWidth = DrawHelper.getInstance().getTextWidth(getLabelPaint(), label);
			switch(getLabelAlign())
			{
				case LEFT:
					canvas.drawLine(cx, y, plotArea.getLeft() + labelWidth, y, getLabelPaint());					
					break;
				case CENTER:
					break;
				case RIGHT:
					canvas.drawLine(cx, y, plotArea.getRight() - labelWidth, y, getLabelPaint());	
					break;
				default:	
					break;
			}							
		}
		float labelX = 0.f;		
		switch(getLabelAlign())
		{
			case LEFT:
				labelX = plotArea.getLeft();				
				break;
			case CENTER:
				labelX = cx;
				break;
			case RIGHT:
				labelX = plotArea.getRight();
				break;
			default:	
				labelX = cx;
		}		
		canvas.drawText(label, labelX, y ,getLabelPaint());		
	}
	
	protected void renderPlot(Canvas canvas)
	{
		if(!sortDataSet())return;
		
		int count = mDataSet.size();
		float funnelWidth = plotArea.getPlotWidth() * (mPlotWidthPercent/100);
		float funnelHeight = this.plotArea.getHeight() /count;
		float cx = plotArea.getCenterX();
		
		if(1 == count)
		{			
			renderPlotOne(canvas,cx,funnelWidth,funnelHeight);
		}
		
		if(XEnum.SortType.DESC == mSortType)
		{
			renderPlotDesc(canvas,cx,funnelWidth,funnelHeight);
		}else{
			renderPlotAsc(canvas,cx,funnelWidth,funnelHeight);
		}			
	}
	
	@Override
	protected boolean postRender(Canvas canvas) throws Exception 
	{	
		try {
			super.postRender(canvas);
			
			//计算主图表区范围
			 calcPlotRange();
			//画Plot Area背景			
			 plotArea.render(canvas);	
			//绘制标题
			renderTitle(canvas);
			
			//绘制图表
			renderPlot(canvas);
			
			//显示焦点
			renderFocusShape(canvas);
		
			//响应提示
			renderToolTip(canvas);
		} catch (Exception e) {
			throw e;
		}
		return true;
	}
	

}
