/**
 * Copyright 2014  XCL-Charts
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 	
 * @Project XCL-Charts 
 * @Description Android图表基类库
 * @author XiongChuanLiang<br/>(xcl_168@aliyun.com)
 * @license http://www.apache.org/licenses/  Apache v2 License
 * @version 1.0
 */
package org.xclcharts.event.touch;

import org.xclcharts.renderer.XChart;

import android.util.Log;
import android.view.MotionEvent;
import android.view.View;


/**
 * @ClassName ChartTouch
 * @Description  上下左右移动图表   		
 * @author XiongChuanLiang<br/>(xcl_168@aliyun.com)
 */

public class ChartTouch implements IChartTouch {
	
	private View mView;
	private XChart mChart;
  
	//单点移动前的坐标位置
	private float oldX = 0.0f,oldY = 0.0f; 	
	
	public ChartTouch(View view, XChart chart) {
		this.mChart = chart;
		this.mView = view;
	}
	
	//用来设置图表的位置   	
	private void setLocation(float oldX, float oldY,float newX, float newY ) {
		// TODO Auto-generated method stub
		
		float xx = 0.0f,yy = 0.0f;		          
        float[] txy = mChart.getTranslateXY();		          
        xx =  txy[0];
        yy =  txy[1];
        
        if(newX < oldX || newY < oldY)	 
        {
      	  xx = (float) (txy[0] + newX - oldX) ;
      	  yy = (float) (txy[1] + newY - oldY) ;
        }
        mChart.setTranslateXY(xx, yy);
        
       // mChart.setChartRange(mChart.getLeft() + newX-oldX, mChart.getTop() + newY-oldY, 
    //			mChart.getWidth(), mChart.getHeight());
        
    	mView.invalidate();		
	}
	
	private float spacing(MotionEvent event) {  
	    float x = event.getX(0) - event.getX(1);  
	    float y = event.getY(0) - event.getY(1);  
	    return (float)Math.sqrt(x * x + y * y);  
	}  
	
		
	@Override
	 public void handleTouch(MotionEvent event) {  
		
			if (event.getPointerCount() == 1)
			{
				handleTouch_PanMode(event);
			}else if (event.getPointerCount() == 2){
				handleTouch_Zoom(event);
			}else{
				
			}		   
	    }  
	
	
	static final int NONE = 0; 
    static final int DRAG = 1; 
    static final int ZOOM = 2; 
    int mode = NONE;
    float oldDist = 1f;
float mr=0;
    float mx;
    float my;
    
    int mTMode = 0;
	
	 public void handleTouch_Zoom(MotionEvent event) 
	 {  
		 
		 switch(event.getActionMasked())
		 {
		 	case MotionEvent.ACTION_DOWN:  //单点触碰
		 		mTMode = 1;  
	            
	            mx=event.getX();
		        mr=50;
		        Log.d("Infor", "mx"+mx);   
		        my=event.getY();
		        Log.d("Infor", "my"+my);
		        mode=this.DRAG;
		        
	            break;  
	        case MotionEvent.ACTION_UP:  
	        	mTMode = 0;  
	        	
	        	mode=this.NONE;
	            break;  
	        case MotionEvent.ACTION_POINTER_UP:  
	        	mTMode -= 1;  
	        	
	        	mode=this.NONE;
	        	
	            break;  
	        case MotionEvent.ACTION_POINTER_DOWN:  //多点触碰
	        	
	        	mTMode += 1;  
	        	
	        	//两点按下时的距离  
	        	 oldDist=this.spacing(event);
		            if(oldDist>10f){
		                 //Log.d("Infor", "oldDist"+oldDist);    
		            }
		        mode=ZOOM;
		        
		        
	            break;  
	        case MotionEvent.ACTION_MOVE:  
	        	
	        	 if ( mTMode >= 2) 
	        	 { 
	        		  	float newDist=spacing(event);          
		                if(newDist>10){
		                    mr=newDist/oldDist ; //*100;
		                    Log.d("Infor", "多点移动。。。");
		                    Log.d("Infor", "newDist:"+newDist);
		                    
		                 
		                    mChart.setScale(mr,mr, event.getX() - newDist/2  ,event.getY() - newDist/2 );
		                    
		                    mView.invalidate();
		                }
	        		 
	        	 }
	        	
		 		break;		 		
			 default:
				 break;
		 }
		
	        switch(event.getActionMasked()){
	        case MotionEvent.ACTION_DOWN://单点触碰
	        mx=event.getX();
	        mr=50;
	        Log.d("Infor", "mx"+mx);   
	        my=event.getY();
	        Log.d("Infor", "my"+my);
	        mode=this.DRAG;
	         break;
	          
	        case MotionEvent.ACTION_POINTER_DOWN://多点触碰
	            oldDist=this.spacing(event);
	            if(oldDist>10f){
	                 Log.d("Infor", "oldDist"+oldDist);    
	            }
	        mode=ZOOM;
	        break;      
	        case MotionEvent.ACTION_MOVE://移动
	            if(mode==DRAG){
	                Log.d("Infor", "单点移动。。。");
	                mx=event.getX();
	                my=event.getY();           
	            }
	            else if(mode==ZOOM){
	                float newDist=spacing(event);          
	                if(newDist>10){
	                    mr=newDist/oldDist ; //*100;
	                    Log.d("Infor", "多点移动。。。");
	                    Log.d("Infor", "newDist:"+newDist);
	                    
	                 
	                    mChart.setScale(mr,mr, event.getX() - newDist/2  ,event.getY() - newDist/2 );
	                    
	                    mView.invalidate();
	                }
	            }
	        break;
	        case MotionEvent.ACTION_UP:
	            mode=this.NONE;
	        break;
	         
	        case MotionEvent.ACTION_POINTER_UP:
	            mode=this.NONE;
	        break;
	        }
	       
	 }
	 
	float mCurrentScale = 1;
	float last_x = -1;
	float last_y = -1;
	
	 float baseValue = 0.0f;
	 
	 //int mode = 0;
	// float oldDist = 0.0f;
	 
	 long mStartTimestamp = 0L;
	 
	 public void handleTouch_Zoom2(MotionEvent event) {  
		 
		 if (event.getAction() == MotionEvent.ACTION_POINTER_DOWN){ // MotionEvent.ACTION_DOWN) {
			 
			 mStartTimestamp = System.currentTimeMillis();
			 
			 
		        baseValue = 0;
		        float x = last_x = event.getRawX();
		        float y = last_y = event.getRawY();
		    } 
		    else if (event.getAction() == MotionEvent.ACTION_MOVE) {
		        if (event.getPointerCount() == 2) {
		        	
		        	
	                
		            float x = event.getX(0) - event.getX(1);
		            float y = event.getY(0) - event.getY(1);
		            float value = (float) Math.sqrt(x * x + y * y);// 计算两点的距离
		            if (baseValue == 0) {
		                baseValue = value;
		            } 
		            else {
		            
		                if (value - baseValue >= 10 || value - baseValue <= -10) {
		                    float scale = value / baseValue;// 当前两点间的距离除以手指落下时两点间的距离就是需要缩放的比例。
		                   // img_scale(scale);  //缩放图片
		                   // mChart.setScale(scale);
		                   // mView.invalidate();
		                }
		            }
		        } 
		        else if (event.getPointerCount() == 1) {
		           /* float x = event.getRawX();
		            float y = event.getRawY();
		            x -= last_x;
		            y -= last_y;
		            if (x >= 10 || y >= 10 || x <= -10 || y <= -10)
		                img_transport(x, y); //移动图片位置
		                last_x = event.getRawX();
		                last_y = event.getRawY();
		            }*/
		        } 
		        else if (event.getAction() == MotionEvent.ACTION_UP){
		 
		        } 
		        else if (event.getAction() == MotionEvent.ACTION_POINTER_DOWN){
		        	long deltaT = System.currentTimeMillis() - mStartTimestamp;
		        }
		    }
		 
		 // long deltaT = System.currentTimeMillis() - mStartTimestamp;
		 
		
		 /*
		 switch (event.getAction() & MotionEvent.ACTION_MASK) {  
	        case MotionEvent.ACTION_DOWN:  
	            mode = 1;  
	            break;  
	        case MotionEvent.ACTION_UP:  
	            mode = 0;  
	            break;  
	        case MotionEvent.ACTION_POINTER_UP:  
	            mode -= 1;  
	            break;  
	        case MotionEvent.ACTION_POINTER_DOWN:  
	        	oldDist = spacing(event);//两点按下时的距离  
	            mode += 1;  
	            break;  
	        case MotionEvent.ACTION_MOVE:  
	        	
	        		//if(event.getSize() == 0)return ;
	        	
		            if ( mode >= 2) { 
		            	
		                float newDist = spacing(event);  
		                if (newDist > oldDist + 1) {  
		                    //zoomOut();  
		                	
		                	//zoom(newDist/oldDist);
		                	
		                	float scale = 2.0f; // 1 * (newDist/oldDist);
		                	
		                	mChart.setScale(scale);
		                	
		                	
		                	oldDist = newDist;
		                	
		                	mView.invalidate();
		                }  
		                if (newDist < oldDist - 1) {  
		                    //zoomIn();  
		                	
		                	float scale = 0.5f; //1 * (newDist/oldDist);
		                	mChart.setScale(scale);
		                	
		                	oldDist = newDist;
		                	
		                	mView.invalidate();
		                }  
		            }
	                break; 
	            }
		// }
	
		 */
	}
	
	 public void handleTouch_PanMode(MotionEvent event) {  
			
		 int action = event.getAction();
		    if ( action == MotionEvent.ACTION_MOVE) {
			   
			      if (oldX > 0 && oldY > 0) {
				        float newX = event.getX(0);
				        float newY = event.getY(0);
				        
				        if(newX-oldX == 0 || newY-oldY == 0) return;
				        
				        setLocation(oldX,oldY,newX,newY );
				        
				        oldX = newX;
				        oldY = newY;
			      }			      			      
		    } else if (action == MotionEvent.ACTION_DOWN) {
			      oldX = event.getX(0);
			      oldY = event.getY(0);
		      
		    } else if (action == MotionEvent.ACTION_UP 
		    		|| action == MotionEvent.ACTION_POINTER_UP) {
			      oldX = 0.0f;
			      oldY = 0.0f;
			      if (action == MotionEvent.ACTION_POINTER_UP) {
			        oldX = -1f;
			        oldY = -1f;
			      }
		    }	        
	    }  

}
