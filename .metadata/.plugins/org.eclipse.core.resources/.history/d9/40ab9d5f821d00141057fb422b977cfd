package com.demo.xclcharts.view;

import java.util.ArrayList;
import java.util.List;

import org.xclcharts.chart.DialChart;
import org.xclcharts.common.MathHelper;
import org.xclcharts.renderer.XEnum;
import org.xclcharts.renderer.plot.Pointer;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.graphics.Paint.Style;
import android.util.AttributeSet;
import android.util.Log;

public class DialChart04View extends GraphicalView {
	
	private String TAG = "DialChart04View";	
	private DialChart chart = new DialChart();
	private float mPercentage = 0.1f;
	
	public DialChart04View(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
		initView();
	}
	
	public DialChart04View(Context context, AttributeSet attrs){   
        super(context, attrs);   
        initView();
	 }
	 
	 public DialChart04View(Context context, AttributeSet attrs, int defStyle) {
			super(context, attrs, defStyle);
			initView();
	 }
	 
	 private void initView()
	 {
		chartRender();
	 }
	 
	 @Override  
	    protected void onSizeChanged(int w, int h, int oldw, int oldh) {  
	        super.onSizeChanged(w, h, oldw, oldh);  
	        chart.setChartRange(w ,h ); 
	    }  		
			
	 public void chartRender()
		{
			try {								
							
				//设置标题背景			
				chart.setApplyBackgroundColor(true);
				chart.setBackgroundColor( (int)Color.rgb(28, 129, 243) );
				//绘制边框
				chart.showRoundBorder();
						
				//设置当前百分比
				chart.getPointer().setPercentage(mPercentage);
				
				//设置指针长度
				chart.setPointerLength(0.5f);
				
				//增加轴承
				addAxis();						
				/////////////////////////////////////////////////////////////
				//设置附加信息
				addAttrInfo();
				/////////////////////////////////////////////////////////////
				
				addPointer();
				
			} catch (Exception e) {
				// TODO Auto-generated catch block
				Log.e(TAG, e.toString());
			}
			
		}
		
		public void addAxis()
		{
		
			List<String> rlabels  = new ArrayList<String>();
			int j=0;
			for(int i=0;i<=150;)
			{
				if(0 == i || j == 4)
				{
					rlabels.add(Integer.toString(j) + ": " +Integer.toString(i));
					j = 0;
				}else{
					rlabels.add("");
					j++;
				}
										
				i+=5;
			}
			chart.addTicksAxis(0.9f, rlabels);
			
			chart.getPlotAxis().get(0).setDetailModeSteps(4);
			
			//chart.getPlotAxis().get(0).getFillAxisPaint().setColor((int)Color.rgb(28, 129, 243));
			//chart.getPlotAxis().get(1).getFillAxisPaint().setColor((int)Color.rgb(28, 129, 243));
			chart.getPlotAxis().get(0).getTickLabelPaint().setColor(Color.WHITE);
			chart.getPlotAxis().get(0).getTickMarksPaint().setColor(Color.WHITE);
			chart.getPlotAxis().get(0).setAxisLineVisible(false);
			
			chart.getPlotAxis().get(0).setTickLabelVisible(true);
			
			
			
			chart.getPointer().getPointerPaint().setStrokeWidth(5);
			
			//chart.getPlotAxis().get(0).setVisible(false);
			
			
			//chart.getPinterCirclePaint().setColor(Color.WHITE );
			
			
			/*
			
			chart.getPointer().setPointerStyle(XEnum.PointerStyle.TRIANGLE);
			//chart.getPointer().getPaintBaseCircle().setColor((int)Color.rgb(226, 200, 79) );
			//chart.getPointer().getPaintBaseCircle().setStrokeWidth(5);
			
			chart.getPointer().getPointerPaint().setColor((int)Color.rgb(226, 200, 79) );
			chart.getPointer().getPointerPaint().setStrokeWidth(3);
			
			chart.getPointer().getPointerPaint().setStyle(Style.STROKE);
			
			chart.getPointer().hideBaseCircle();
			*/
			
		}
		
		
		private void addAttrInfo()
		{
			/////////////////////////////////////////////////////////////
			//设置附加信息
			Paint paintTB = new Paint();
			paintTB.setColor(Color.WHITE);
			paintTB.setTextAlign(Align.CENTER);
			paintTB.setTextSize(30);	
			paintTB.setAntiAlias(true);	
			chart.addAttributeInfo(XEnum.Location.TOP, "当前网速", 0.3f, paintTB);
			
			Paint paintBT = new Paint();
			paintBT.setColor(Color.WHITE);
			paintBT.setTextAlign(Align.CENTER);
			paintBT.setTextSize(38);
			paintBT.setFakeBoldText(true);
			paintBT.setAntiAlias(true);	
			chart.addAttributeInfo(XEnum.Location.BOTTOM, Float.toString(mPercentage), 0.3f, paintBT);
			
			Paint paintBT2 = new Paint();
			paintBT2.setColor(Color.WHITE);
			paintBT2.setTextAlign(Align.CENTER);
			paintBT2.setTextSize(30);
			paintBT2.setFakeBoldText(true);
			paintBT2.setAntiAlias(true);	
			chart.addAttributeInfo(XEnum.Location.BOTTOM, "MB/S", 0.4f, paintBT2);				
		}
		
		public void addPointer()
		{				
			chart.clearPlotPointer();
			
			chart.addPointer();
			chart.addPointer();
			
			List<Pointer> mp = chart.getPlotPointer();	
			
			
			
			mp.get(0).setPointerLength(0.8f);	
			mp.get(0).getPointerPaint().setColor(Color.BLUE);
			float p1 = mPercentage * 0.3f;
			if(p1 < 0 || p1 > 1) p1 = 0.0f;
			mp.get(0).setPercentage(p1 );
			
			
			mp.get(1).setPointerLength(0.75f);
			//mp.get(1).setPointerStyle(XEnum.PointerStyle.TRIANGLE);		
			mp.get(1).getPointerPaint().setColor(Color.RED);
			float p2 = mPercentage + 0.1f;
			if(p2 < 0 || p2 > 1) p2 = 0.0f;			
			mp.get(1).setPercentage( p2);	
			
			
		}
		public void setCurrentStatus(float percentage)
		{
			//清理
			chart.clearPlotAxis();
					
			mPercentage =  percentage;
			//设置当前百分比
			chart.getPointer().setPercentage(mPercentage);
			addAxis();
			//addAttrInfo();
			
			addPointer();
		}


		@Override
		public void render(Canvas canvas) {
			// TODO Auto-generated method stub
			 try{
		            chart.render(canvas);
		        } catch (Exception e){
		        	Log.e(TAG, e.toString());
		        }
		}

}
