/**
 * Copyright 2014  XCL-Charts
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 	
 * @Project XCL-Charts 
 * @Description Android图表基类库
 * @author XiongChuanLiang<br/>(xcl_168@aliyun.com)
 * @license http://www.apache.org/licenses/  Apache v2 License
 * @version 1.0
 */
package org.xclcharts.event.click;

import org.xclcharts.common.MathHelper;

import android.graphics.PointF;
import android.graphics.RectF;

/**
 * @ClassName PositionRecord
 * @Description  位置记录信息基类
 * @author XiongChuanLiang<br/>(xcl_168@aliyun.com)
 *  
 */

public abstract class PositionRecord implements IPositionCompare {
	
	private static final String TAG = "PositionRecord";
		
	protected PointF mPoint = null;		
	protected RectF mRectF = null;
	
	protected int mDataID = -1;
	protected int mDataChildID = -1;
	//protected int mCategoryID = -1;	
	
	protected float mOffsetAgent = 0.0f;
	protected float mCurrentAgent = 0.0f;	
	
	//放大值
	private int mExtValue = 0;

		
	//当前记录在数据源中行号
	public int getDataID()
	{
		return mDataID;
	}

	//当前记录所属数据集的行号
	public int getDataChildID()
	{
		return mDataChildID;
	}	
	
	/*
	//分类轴的行号
	public int getCategoryID()
	{
		return mCategoryID;
	}
	*/
	public PointF getPosition()
	{
		return mPoint;
	}
	
	
	
	public RectF getRectF()
	{
		return mRectF;
	}
	
	
	public float getAgent()
	{
		return mOffsetAgent + mCurrentAgent;
	}
	
	
	
	public void extPointClickRange(int value)
	{
		//if(value < 50) return;
		mExtValue = value;
	}
	
			
	public boolean compareF(float x, float y) 
	{
		// TODO Auto-generated method stub
		
		if(null == mRectF)return false;
								
		mRectF.left -=  mExtValue;
		mRectF.top -=  mExtValue;
		mRectF.right +=  mExtValue;
		mRectF.bottom +=  mExtValue;			
	
		//contains 在范围比较小时很不好使.
		if( mRectF.contains(x, y)) return true;
		
		//再加层手工检查
		if( (Float.compare(x, mRectF.left) == 1 || Float.compare(x, mRectF.left) == 0 )
				&& (Float.compare(x, mRectF.right) == -1 || Float.compare(x, mRectF.right) == 0 ) 
			&& (Float.compare(y, mRectF.bottom) == 1 || Float.compare(y, mRectF.bottom) == 0 )
			&& (Float.compare(y, mRectF.top) == -1 || Float.compare(y, mRectF.top) == 0 ) ) 
			{
				return true;
			}	
		
		return false;
	}			
	
	
	public boolean compareAgent(float x, float y) 
	{
		
		double distance =  MathHelper.getInstance().getDistance(pint.x, pint.y, x,y);
		
		if(distance <= chart.getRadius())
		{				
			double agent1 = MathHelper.getInstance().getDegree(pint.x, pint.y, x,y);
		}
		
		return false;
	}
	
	
	
	public String getPointInfo()
	{	
		if(null == mPoint)return "";
		String info = "x:"+Float.toString(mPoint.x)+" y:"+Float.toString(mPoint.y);
		return info;
	}
	
	public String getBarInfo()
	{	
		if(null == mRectF)return "";
		
		float left = mRectF.left +  mExtValue;
		float top = mRectF.top +  mExtValue;
		float right = mRectF.right -  mExtValue;
		float bottom = mRectF.bottom -  mExtValue;
		
		String info =" left:"+Float.toString(left)+" top:"+Float.toString(top) +
				 	 " right:"+Float.toString(right)+" bottom:"+Float.toString(bottom);
		return info;
	}
	
	
}
