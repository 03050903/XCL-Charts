/**
 * Copyright 2014  XCL-Charts
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 	
 * @Project XCL-Charts 
 * @Description Android图表基类库
 * @author XiongChuanLiang<br/>(xcl_168@aliyun.com)
 * @license http://www.apache.org/licenses/  Apache v2 License
 * @version 1.3
 */

package org.xclcharts.renderer.plot;

import org.xclcharts.renderer.XEnum;

import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;

/**
 * @ClassName Pointer
 * @Description 指针类,定制其属性
 * @author XiongChuanLiang<br/>(xcl_168@aliyun.com)
 * 
 */

public class Pointer {
	
	private Paint mPaintPoint = null;
	private Paint mPaintBaseCircle = null;
	
	protected float mCenterX = 0.0f;
	protected float mCenterY = 0.0f;
	

	
	protected float mPointerAngle = 0.0f;
	
	protected float mEndX = 0.0f;
	protected float mEndY = 0.0f;
	
	protected float mRadius = 20f;
	protected XEnum.PointerStyle mPointStyle = XEnum.PointerStyle.LINE;
	
	protected boolean mShowBase = true;
	
	
	public Pointer()
	{
		mPaintPoint = new Paint();
		mPaintPoint.setColor((int)Color.rgb(235, 138, 61)); //(int)Color.rgb(173, 42, 76));
		mPaintPoint.setStrokeWidth(3);
		mPaintPoint.setStyle(Style.FILL); 
		mPaintPoint.setAntiAlias(true);
		
		mPaintBaseCircle = new Paint();
		mPaintBaseCircle.setStyle(Style.FILL);
		mPaintBaseCircle.setAntiAlias(true);	
		mPaintBaseCircle.setColor((int)Color.rgb(235, 138, 61));
		mPaintBaseCircle.setStrokeWidth(8);
	}
	
	/**
	 * 设置指针显示风格
	 * @param style
	 */
	public void setPointerStyle(XEnum.PointerStyle style)
	{
		mPointStyle = style;
	}			
			
	/**
	 * 开放指针画笔
	 * @return
	 */
	public Paint getPointerPaint()
	{
		return mPaintPoint;
	}
	
	/**
	 * 开放指针底部圆画笔
	 * @return 底部圆画笔
	 */
	public Paint getPaintBaseCircle()
	{
		return mPaintBaseCircle;
	}
	
	/**
	 * 开放指针底部半径
	 * @param radius 半径
	 */
	public void setBaseRadius(float radius)
	{
		mRadius = radius;
	}
	
	/**
	 * 返回指针底部半径
	 * @return 半径
	 */
	public float getBaseRadius()
	{
		return mRadius;
	}
	
	/**
	 * 不绘制底部圆
	 */
	public void hideBaseCircle()
	{
		mShowBase = false;
	}
	
	/**
	 * 绘制底部圆
	 */
	public void showBaseCircle()
	{
		mShowBase = true;
	}
	
	public void setStartXY(float x,float y)
	{
		mCenterX = x;
		mCenterY = y;
	}
	

}
